# GitHub Secrets Template
# Copy this file and fill in your actual values
# DO NOT commit actual secret values to your repository!

# Docker Hub Configuration
DOCKER_HUB_USERNAME=your-dockerhub-username
DOCKER_HUB_ACCESS_TOKEN=dckr_pat_your-access-token-here

# Application Configuration
FLASK_SECRET_KEY=your-super-secret-flask-key-here
TEST_DATABASE_URL=sqlite:///test.db
STAGING_DATABASE_URL=postgresql://user:pass@staging-db:5432/myapp
PRODUCTION_DATABASE_URL=postgresql://user:pass@prod-db:5432/myapp

# Staging Server SSH Access
STAGING_HOST=staging.example.com
STAGING_USERNAME=deploy
STAGING_SSH_KEY=-----BEGIN OPENSSH PRIVATE KEY-----
# your staging private key content here
# -----END OPENSSH PRIVATE KEY-----
STAGING_SSH_PASSPHRASE=optional-passphrase-if-key-encrypted

# Production Server SSH Access
PRODUCTION_HOST=production.example.com
PRODUCTION_USERNAME=deploy
PRODUCTION_SSH_KEY=-----BEGIN OPENSSH PRIVATE KEY-----
# your production private key content here
# -----END OPENSSH PRIVATE KEY-----
PRODUCTION_SSH_PASSPHRASE=optional-passphrase-if-key-encrypted
PRODUCTION_DOMAIN=myapp.com

# Optional External Services
CODECOV_TOKEN=codecov-token-for-coverage-reporting
SLACK_WEBHOOK=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK

# Instructions for generating values:
#
# 1. Flask Secret Key:
#    python -c "import secrets; print(secrets.token_urlsafe(32))"
#
# 2. SSH Keys:
#    ssh-keygen -t ed25519 -C "github-actions@yourdomain.com"
#
# 3. Docker Hub Token:
#    Go to Docker Hub > Account Settings > Security > New Access Token
#
# 4. Codecov Token:
#    Go to codecov.io > Your Repository > Settings > General
#
# 5. Slack Webhook:
#    Go to Slack App Settings > Incoming Webhooks > Add New Webhook
