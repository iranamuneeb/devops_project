name: Simple CI/CD Pipeline with Secrets

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # Step 1: Test the application
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        env:
          SECRET_KEY: ${{ secrets.FLASK_SECRET_KEY }}
        run: |
          python -m pytest FlaskWebProject1/tests/ -v

  # Step 2: Build and push Docker image (only on main branch)
  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/flask-app:latest

  # Step 3: Deploy to server (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # Pull the latest image
            docker pull ${{ secrets.DOCKER_USERNAME }}/flask-app:latest
            
            # Stop existing container
            docker stop flask-app || true
            docker rm flask-app || true
            
            # Run new container
            docker run -d \
              --name flask-app \
              -p 80:8000 \
              -e SECRET_KEY="${{ secrets.FLASK_SECRET_KEY }}" \
              ${{ secrets.DOCKER_USERNAME }}/flask-app:latest

      - name: Send notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            MESSAGE="✅ Deployment successful!"
          else
            MESSAGE="❌ Deployment failed!"
          fi
          
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"$MESSAGE\"}" \
            ${{ secrets.SLACK_WEBHOOK }}
